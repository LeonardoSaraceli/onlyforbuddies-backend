// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  orders    Order[]
  addresses Address[]
  cart      Cart?
  role      Role      @default(USER)
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  variants    Variant[]
  categories  Category[]
}

model Variant {
  id         Int            @id @default(autoincrement())
  sku        String         @unique
  color      String
  hex        String         @db.Char(7)
  price      Decimal        @db.Decimal(10, 2)
  images     Image[]
  product_id Int
  product    Product        @relation(fields: [product_id], references: [id], onDelete: Cascade)
  orders     ProductOrder[]
  carts      ProductCart[]
  sizes      ProductSize[]
}

model Image {
  id         Int     @id @default(autoincrement())
  url        String
  variant_id Int
  variant    Variant @relation(fields: [variant_id], references: [id], onDelete: Cascade)
}

model Order {
  id         Int            @id @default(autoincrement())
  total      Decimal        @db.Decimal(10, 2)
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt
  status     String
  user_id    Int
  user       User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  products   ProductOrder[]
}

model ProductOrder {
  id         Int     @id @default(autoincrement())
  quantity   Int
  variant_id Int
  variant    Variant @relation(fields: [variant_id], references: [id], onDelete: Cascade)
  order_id   Int
  order      Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
}

model Address {
  id         Int     @id @default(autoincrement())
  street     String
  number     Int
  complement String?
  region     String
  city       String
  state      String
  country    String
  zip        String  @db.Char(9)
  main       Boolean @default(false)
  user_id    Int
  user       User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Cart {
  id         Int           @id @default(autoincrement())
  total      Decimal       @db.Decimal(10, 2)
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt
  user_id    Int           @unique
  user       User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  products   ProductCart[]
}

model ProductCart {
  id         Int     @id @default(autoincrement())
  quantity   Int
  cart_id    Int
  cart       Cart    @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  variant_id Int
  variant    Variant @relation(fields: [variant_id], references: [id], onDelete: Cascade)
}

model Size {
  id       Int           @id @default(autoincrement())
  size     String
  variants ProductSize[]
}

model ProductSize {
  id         Int     @id @default(autoincrement())
  stock      Int
  variant_id Int
  variant    Variant @relation(fields: [variant_id], references: [id], onDelete: Cascade)
  size_id    Int
  size       Size    @relation(fields: [size_id], references: [id], onDelete: Cascade)
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}
